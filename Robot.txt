// Vehicle Movements such as going forward and coming to halt
plant VehicleMovement:
    controllable start, stop;
    location idle:
        initial; marked;
        edge start goto move;
    location move:
        edge stop goto idle;
end

plant AuxiliaryMovements:
    controllable rotate, stoprotate;
    location NoRotation:
        initial;
        marked;
        edge rotate goto Rotation;
    location Rotation:
        edge stoprotate goto NoRotation;
end

//Vehicle Lever operation
plant VehicleLever:
    controllable c_Raise, c_Lower;
    uncontrollable u_intermediate;
    location low:
        initial; marked;
        edge c_Raise goto intermediate_LowToHigh;
    location intermediate_LowToHigh:
        edge u_intermediate when VehicleStatus.Busy = true and BatteryLevel.low = false and BatteryLevel.critical = false and AuxiliaryMovements.Rotation = false goto high;
    location intermediate_HighToLow:
        edge u_intermediate when VehicleStatus.Busy = true and BatteryLevel.low = false and BatteryLevel.critical = false and AuxiliaryMovements.Rotation = false goto low;
    location high:
        edge c_Lower goto intermediate_HighToLow;
end


// Obstacle Sensor
plant ObstacleSensor:
    uncontrollable TurningOn, TurningOff;
    location off:
        initial; marked;
        edge TurningOn goto on;
    location on:
        edge TurningOff goto off;
end

// Touch Sensor
plant TouchSensor:
    uncontrollable TurningOn, TurningOff;
    location off:
        initial; marked;
        edge TurningOn goto on;
    location on:
        edge TurningOff goto off;
end

// Battery System
plant BatteryLevel:
    uncontrollable Increase, Decrease, Replace;
    location full:
    initial; marked;
        edge Decrease when ChargingSystem.Charging = false goto low;
    location low:
        edge Increase when ChargingSystem.Charging = true goto full;
        edge Decrease when ChargingSystem.Charging = false goto critical;
    location critical:
        edge Replace goto full;
end

plant VehicleStatus:
     controllable c_isAvailable, c_inProcess, c_ExecutePathPlanner , c_GetDestination, c_JobCompleted;
     location idle:
     initial; marked;
        edge c_isAvailable goto Available;
     location Available:
        edge c_GetDestination goto FetchingDestination;
     location FetchingDestination:
        edge c_ExecutePathPlanner goto inExecution;
     location inExecution:
        edge c_inProcess goto Busy;
     location Busy:
        edge c_JobCompleted goto idle;
end

// Camera Sensor
plant CameraSensor:
    uncontrollable u_Detected;
    controllable c_Scanning;
    location on:
    initial; marked;
        edge c_Scanning goto off;
    location off:
        edge u_Detected goto on;
end

plant ChargingSystem:
    controllable StartCharging, StopCharging, fetch_ChargingStation;
    location idle:
        initial; marked;
        edge fetch_ChargingStation goto fetch;
    location fetch:
        edge StartCharging goto Charging;
    location Charging:
        edge StopCharging goto idle;
end


// REQUIREMENTS
requirement invariant BatteryLevel.low = true or BatteryLevel.critical = true disables VehicleLever.c_Raise;
requirement invariant BatteryLevel.low = true or BatteryLevel.critical = true disables VehicleStatus.c_isAvailable;
requirement invariant BatteryLevel.low = true or BatteryLevel.critical = true disables VehicleStatus.c_inProcess;
requirement invariant BatteryLevel.low = true or BatteryLevel.critical = true disables VehicleStatus.c_ExecutePathPlanner;
requirement invariant BatteryLevel.low = true or BatteryLevel.critical = true disables VehicleStatus.c_GetDestination;
requirement invariant BatteryLevel.low = true or BatteryLevel.critical = true disables VehicleStatus.c_JobCompleted;
requirement invariant VehicleMovement.move disables AuxiliaryMovements.rotate;
requirement invariant AuxiliaryMovements.Rotation disables VehicleMovement.start;
requirement invariant VehicleLever.intermediate_LowToHigh disables VehicleMovement.start;
requirement invariant VehicleLever.intermediate_HighToLow disables VehicleMovement.start;

requirement PathScanning: //Initial location of the vehicle has been assumed to be determined.CameraScanning begins in order to achieve new location.
    location Deactive:
    initial; marked;
        edge VehicleMovement.start when CameraSensor.off; //Vehicle starts only hen camera is scanning. Scanning starts followed by VVehicle movement. 
        edge AuxiliaryMovements.rotate when CameraSensor.on; //Rotation occurs only when camera scanning is on => special movements. 
    end

requirement ChargeWhenBatteryIsLow:
    location Getting_Location:
        edge ChargingSystem.StartCharging when BatteryLevel.low and VehicleMovement.idle and AuxiliaryMovements.NoRotation goto Charging;
   location NoCharging:
        initial; marked;
        edge ChargingSystem.fetch_ChargingStation when BatteryLevel.low goto Getting_Location;
   location Charging:
       edge ChargingSystem.StopCharging when BatteryLevel.full goto NoCharging;
end

//Stop Vehicle Movements while Charging
requirement StopAllMovementsWhenCharging_Lever:
    location Deactive:
       initial;marked;
       edge VehicleMovement.start when (ObstacleSensor.off and TouchSensor.off) and BatteryLevel.full and VehicleStatus.Busy or( ObstacleSensor.off and TouchSensor.off and BatteryLevel.low and ChargingSystem.fetch and ChargeWhenBatteryIsLow.Getting_Location);
       edge VehicleLever.c_Raise when ChargingSystem.idle and AuxiliaryMovements.NoRotation and VehicleMovement.idle and VehicleStatus.Busy;
        edge VehicleLever.c_Lower when ChargingSystem.idle and AuxiliaryMovements.NoRotation and VehicleMovement.idle and VehicleStatus.Busy;
        edge AuxiliaryMovements.rotate when (BatteryLevel.full and VehicleStatus.Busy)and  VehicleLever.intermediate_LowToHigh = false and VehicleLever.intermediate_HighToLow = false or ChargingSystem.fetch and ChargeWhenBatteryIsLow.Getting_Location ;
end


//requirement VehicleLever.intermediate needs VehicleStatus.Busy = false;



